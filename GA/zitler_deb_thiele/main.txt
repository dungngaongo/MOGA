#include "ga.h"

/* USER CODE BEGIN PV */
#define VOLTAGE 3.3f
#define CURRENT 0.02f
/* USER CODE END PV */

int main() {
    HAL_Init();
    SystemClock_Config();
    MX_GPIO_Init();
    MX_USART1_UART_Init();
    
    initialize_bounds();
    
    Population pop, offspring_cross, offspring_mut, offspring_ls, combined, selected;
    srand(HAL_GetTick()); 
    
    // Initialize population
    random_population(&pop);
    for (int i = 0; i < pop.size; i++) {
        evaluate(&pop.solutions[i]);
    }

    uint32_t start_time = HAL_GetTick();
    
    // Main optimization loop
    for (int iter = 0; iter < MAX_ITER; iter++) {
        // Generate offspring
        crossover(&pop, &offspring_cross);
        mutation(&pop, &offspring_mut);
        local_search(&pop, &offspring_ls);
        
        // Combine populations
        combined.size = 0;
        for (int i = 0; i < pop.size; i++) {
            combined.solutions[combined.size++] = pop.solutions[i];
        }
        for (int i = 0; i < offspring_cross.size; i++) {
            combined.solutions[combined.size++] = offspring_cross.solutions[i];
        }
        for (int i = 0; i < offspring_mut.size; i++) {
            combined.solutions[combined.size++] = offspring_mut.solutions[i];
        }
        for (int i = 0; i < offspring_ls.size; i++) {
            combined.solutions[combined.size++] = offspring_ls.solutions[i];
        }
        
        selection(&combined, &selected);
        pop = selected;
        
        printf("Iteration %d\n", iter);
    }

    uint32_t end_time = HAL_GetTick();
    uint32_t elapsed_ms = end_time - start_time;

    float time_sec = elapsed_ms / 1000.0f;
    float energy_joules = VOLTAGE * CURRENT * time_sec;
    
    int front_indices[POP_SIZE];
    int front_size;
    find_pareto_front(pop.solutions, pop.size, front_indices, &front_size);
    
    Population pareto_front = {0};
    for (int i = 0; i < front_size; i++) {
        pareto_front.solutions[i] = pop.solutions[front_indices[i]];
    }
    pareto_front.size = front_size;
    
    for (int i = 0; i < pareto_front.size; i++) {
        snprintf(msg, sizeof(msg), "x: %.2f, %.2f | f1: %.4f, f2: %.4f\r\n",
                pareto_front.solutions[i].x[0], pareto_front.solutions[i].x[1],
                pareto_front.solutions[i].fitness[0], pareto_front.solutions[i].fitness[1]);
        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
    }
    
    char msg[128];
    snprintf(msg, sizeof(msg), "Done! Time: %lums (%.2fs), Energy: %.4fJ\r\n", elapsed_ms, time_sec, energy_joules);
    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);

    while (1) {
        HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13); // hoặc pin LED nào đó
        HAL_Delay(500);
    }
}