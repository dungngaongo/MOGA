int main(void) {
    HAL_Init();
    SystemClock_Config();
    MX_GPIO_Init();
    MX_USART1_UART_Init();

    // Code MOGA here
    Population pop, offspring_cross, offspring_mut, offspring_ls, combined, selected;
    Archive archive = {0};

    srand(HAL_GetTick()); // STM32 không có time(NULL)

    random_population(&pop);
    for (int i = 0; i < pop.size; i++) {
        evaluate(&pop.solutions[i]);
    }

    for (int iter = 0; iter < MAX_ITER; iter++) {
        crossover(&pop, &offspring_cross);
        mutation(&pop, &offspring_mut);
        local_search(&pop, &offspring_ls);

        combined.size = 0;
        for (int i = 0; i < pop.size; i++) {
            combined.solutions[combined.size++] = pop.solutions[i];
        }
        for (int i = 0; i < offspring_cross.size; i++) {
            combined.solutions[combined.size++] = offspring_cross.solutions[i];
        }
        for (int i = 0; i < offspring_mut.size; i++) {
            combined.solutions[combined.size++] = offspring_mut.solutions[i];
        }
        for (int i = 0; i < offspring_ls.size; i++) {
            combined.solutions[combined.size++] = offspring_ls.solutions[i];
        }

        selection(&combined, &selected);
        pop = selected;
        update_archive(&pop, &archive);
    }

    void send_archive(UART_HandleTypeDef *huart, Archive *archive) {
        char buf[128];
        snprintf(buf, sizeof(buf), "=== Archive Results ===\r\n");
        HAL_UART_Transmit(huart, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
        
        for (int i = 0; i < archive->size; i++) {
            snprintf(buf, sizeof(buf), "x=%f, f1=%f, f2=%f\r\n",
                    archive->solutions[i].x[0],
                    archive->solutions[i].fitness[0],
                    archive->solutions[i].fitness[1]);
            HAL_UART_Transmit(huart, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
        }
    }

    send_archive(&huart1, &archive);

    while (1) {
        HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13); // hoặc pin LED nào đó
        HAL_Delay(500);
    }
}
